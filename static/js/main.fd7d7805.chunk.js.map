{"version":3,"sources":["components/Option.js","App.js","serviceWorker.js","index.js"],"names":["Option","React","Component","constructor","props","super","setCompColor","strategy","this_form","ReactDOM","findDOMNode","this","getElementsByClassName","style","border","handleChangeType","e","setState","target","value","handleChangeStrategy","handleChangeStrike","Math","trunc","parseInt","isNaN","alert","strike","handleChangePrice","price","handleRemoveOption","preventDefault","state","id","componentDidMount","handleUpdateOption","componentDidUpdate","renderStockOrOption","className","type","checked","onChange","onClick","step","max","name","min","render","defaultProps","App","handleAddOption","updated_options","options","map","option","Date","now","push","key","updated_options_data","optionsData","new_data","updatedOptions","handleGenChart","fetchPayoff","updatedOptionsData","filter","payoff","data","headers","method","body","JSON","stringify","fetch","then","res","json","console","log","catch","err","x","Array","from","keys","y","mode","marker","color","layout","width","height","title","Boolean","window","location","hostname","match","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fd7d7805.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from \"react-dom\"\nimport '../styles/style.css'\n\n\nclass Option extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            id: this.props.id,\n            style: this.props.style,\n            strategy: this.props.strategy,\n            strike: this.props.strike,\n            price: this.props.price\n        }\n\n    }\n    componentDidMount(){\n        // pass option data up to parent \n        this.props.handleUpdateOption(this.state.id, this.state)\n\n        // set component border color \n        this.setCompColor(this.state.strategy)\n    }\n\n    // set component border color \n    setCompColor = (strategy)=>{\n        let comp = ReactDOM.findDOMNode(this)\n        let this_form = comp.getElementsByClassName('option_info')[0]\n        if(strategy === 'sell'){\n            this_form.style.border = \"solid 2px red\"\n        }else{\n            this_form.style.border = \"solid 2px green\"\n        }\n    }\n\n    handleChangeType=(e)=>{\n        this.setState({style:e.target.value}) // save option type in state\n    }\n\n    handleChangeStrategy=(e)=>{\n        this.setCompColor(e.target.value) // set component border color \n        this.setState({strategy:e.target.value}) // save option strategy in state\n    }\n\n    handleChangeStrike=(e)=>{\n        // if input is not a NaN value, then save it in state\n        // otherwise replace it with an empty string\n        \n        let value = Math.trunc(parseInt(e.target.value)) \n        if(isNaN(value) === true){\n            value = \"\"\n        }\n        // check that value is between 0 and 400\n        else if(value >= 400 || value < 0){\n            alert(\"Please enter values between 0 and 399\")\n            value = \"\"\n        }\n        this.setState({strike: value}) // save strike in state\n    }\n\n    handleChangePrice=(e)=>{\n        // if input is not a NaN value, then save it in state\n        // otherwise replace it with an empty string\n\n        let value = \"\"\n        if(isNaN(parseInt(e.target.value)) === false){\n            value = Math.trunc(parseInt(e.target.value)) \n        }\n        this.setState({price: value}) // save price in state\n    }\n\n    handleRemoveOption=(e)=>{\n        e.preventDefault()\n        this.props.handleRemoveOption(this.state.id) // remove option form current option list\n    }\n\n    componentDidUpdate(){\n        // when this options state updates, resend current data up to main App.js component\n        this.props.handleUpdateOption(this.state.id, this.state)\n    }\n\n    renderStockOrOption(){\n        // if it is a stock, remove the strike and price form elements\n        if (this.state.style === 'stock'){\n            return (\n                <form className='option_info'>\n                    \n                    <div className='option_type'>\n                        <label>Put<input type=\"radio\" checked={this.state.style === \"put\"}  value=\"put\" onChange={this.handleChangeType}/></label>\n                        <label>Call<input type=\"radio\" checked={this.state.style === \"call\"}  value=\"call\" onChange={this.handleChangeType}/></label>\n                        <label>Stock<input type=\"radio\" checked={this.state.style === \"stock\"}  value=\"stock\" onChange={this.handleChangeType}/></label>\n                    </div>\n\n                    <div className='option_strategy'>\n                            <label>Sell<input type=\"radio\" checked={this.state.strategy === \"sell\"} value=\"sell\" onChange={this.handleChangeStrategy}/></label>\n                            <label>Buy<input type=\"radio\"   checked={this.state.strategy === \"buy\"} value=\"buy\" onChange={this.handleChangeStrategy}/></label>\n                    </div>\n                    <button className='delete' onClick={this.handleRemoveOption}>Delete</button>\n                </form>\n            )\n        }else{\n            // display full option form \n            return (\n                <form className='option_info'>\n                    \n                    <div className='option_type'>\n                        <label>Put<input type=\"radio\" checked={this.state.style === 'put'}  value=\"put\" onChange={this.handleChangeType}/></label>\n                        <label>Call<input type=\"radio\" checked={this.state.style === 'call'}  value=\"call\" onChange={this.handleChangeType}/></label>\n                        <label>Stock<input type=\"radio\" checked={this.state.style === 'stock'}  value=\"stock\" onChange={this.handleChangeType}/></label>\n                    </div>\n\n                    <div className='option_strategy'>\n                            <label>Sell<input type=\"radio\" checked={this.state.strategy === \"sell\"} value=\"sell\" onChange={this.handleChangeStrategy}/></label>\n                            <label>Buy<input type=\"radio\"   checked={this.state.strategy === \"buy\"} value=\"buy\" onChange={this.handleChangeStrategy}/></label>\n                    </div>\n\n                    <label>Strike: <input step=\"1\" type='number' max=\"400\" name='strike' value={this.state.strike} onChange={this.handleChangeStrike}/></label>\n                    <label>Price: <input step=\"1\" type='number' name='price' min=\"0\" value={this.state.price} onChange={this.handleChangePrice}/></label>\n                    <button className='delete' onClick={this.handleRemoveOption}>Delete</button>\n                </form>\n            )\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                {this.renderStockOrOption()}\n            </div>\n        )\n    }\n}\n\n// create default props to fill state if no props are passed into the Option Component\nOption.defaultProps = {\n    style: 'put',\n    strategy: 'sell',\n    strike: 0,\n    price: 0\n}\n\nexport default Option;","import React from 'react';\nimport './styles/style.css'\nimport Option from './components/Option'\nimport Plot from 'react-plotly.js';\n\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n        options: [],\n        optionsData:[],\n        payoff: [],\n    }\n  }\n\n  \n  handleAddOption = (e)=>{\n    e.preventDefault()\n\n    // get current options in state\n    let updated_options = this.state.options.map((option)=>{\n      return option\n    })\n\n    let id = Date.now() // generate random key value by gettign current date and time\n    // push a new option to current option list\n    updated_options.push(<Option id={id} key={id} handleUpdateOption={this.handleUpdateOption} handleRemoveOption={this.handleRemoveOption}/>)\n\n    // get the new id and add it to the current options data dictionary\n    let updated_options_data = this.state.optionsData\n    updated_options_data.push({id:id})\n    \n    // set state with updated option components and option data\n    this.setState({options: updated_options, optionsData:updated_options_data})\n  }\n\n  handleUpdateOption = (id, new_data)=>{\n    // find given option id in current data and update its value with new option data from user\n    const updatedOptions = this.state.optionsData.map((option) =>{\n      if (option.id === id){\n          return new_data\n      }else{\n          return option\n      }\n    });\n    // set new state with updated option data\n    this.setState({optionsData: updatedOptions})\n  }\n\n\n  handleGenChart = (e)=>{\n    e.preventDefault()\n    this.fetchPayoff()\n  }\n\n\n  async fetchPayoff(){\n   \n    let data = {\n      options: this.state.optionsData\n    }\n\n    let headers = {\n        method: 'POST',\n        headers:{\n            \"Content-type\": \"application/json\",\n            \"x-powered-by\": \"CORS Anywhere\"\n        },\n        body: JSON.stringify(data)\n    }\n  \n    await fetch(\"https://cors-anywhere.herokuapp.com/https://6rswc176r1.execute-api.us-east-1.amazonaws.com/default/generateOptionPayoff\",headers).then((res)=>{\n        return res.json()\n    }).then((data)=>{\n      // get response data vector for option strategy and set it to teh chartjs data field \n      console.log(data['res'])\n      this.setState({payoff: data['res']})\n\n    }).catch((err)=>{\n      console.log(err)\n      alert(\"An Error Occured Generating Option Payoffs!\")\n    })\n}\n\n\nhandleRemoveOption = (id)=>{\n  // remove option data\n  const updatedOptionsData = this.state.optionsData.filter((option) =>{\n    if (option.id !== id){\n        return option\n    }else{\n      return 0\n    }\n  });\n\n  // remove option from display list\n  const updatedOptions = this.state.options.filter((option) =>{\n    if (option.props.id !== id){\n        return option\n    }else{\n      return 0\n    }\n  });\n\n  this.setState({optionsData: updatedOptionsData, options: updatedOptions})\n}\n\n\n  render(){\n    return (\n      <div>\n          <h1>Option Payoff Grapher</h1>\n          <div className='options'>\n              <button id='add_option' onClick={this.handleAddOption}>Add Option</button>\n              <div id='options_display'>\n                  {this.state.options}\n              </div>\n          </div>\n          \n          <button id='gen_chart' onClick={this.handleGenChart}>Generate Chart</button>\n\n          <div className='plot-section'>\n            <Plot\n              id = 'chart'\n              className = \"plot\"\n              data={[\n                {\n                  x: Array.from(Array(400).keys()),\n                  y: this.state.payoff,\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  marker: {color: 'green'},\n                }]}\n              layout={ {width: 1100, height: 600, title: 'Option Payoff Chart'} }\n            />\n          </div>\n  \n\n      </div>\n    );\n\n  }\n\n  \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}