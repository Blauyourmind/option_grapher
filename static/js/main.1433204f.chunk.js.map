{"version":3,"sources":["components/Option.js","components/Email.js","App.js","serviceWorker.js","index.js"],"names":["Option","React","Component","constructor","props","super","setCompColor","strategy","this_form","ReactDOM","findDOMNode","this","getElementsByClassName","style","border","handleChangeType","e","setState","target","value","handleChangeStrategy","handleChangeStrike","strike","Math","trunc","parseInt","handleChangePrice","price","handleRemoveOption","preventDefault","state","id","componentDidMount","componentDidUpdate","handleUpdateOption","renderStockOrOption","className","type","checked","onChange","onClick","step","name","render","defaultProps","Email","handleChangeEmail","email","handleSubmitEmail","to_email","RegExp","test","window","scrollTo","html2canvas","document","getElementById","then","canvas","base64","toDataURL","emailjs","send","content","alert","catch","required","App","handleAddOption","updated_options","options","map","option","Date","now","push","key","updated_options_data","optionsData","console","log","new_data","updatedOptions","filter","handleGenChart","fetchPayoff","updatedOptionsData","payoff","chart_data","labels","Array","from","keys","datasets","label","backgroundColor","borderColor","pointBackgroundColor","data","chart_options","maintainAspectRatio","responsive","scales","yAxes","gridLines","zeroLineWidth","zeroLineColor","legend","display","fontColor","tooltips","mode","headers","method","body","JSON","stringify","fetch","res","json","fill","err","width","height","Boolean","location","hostname","match","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qMAKA,MAAMA,UAAeC,IAAMC,UACvBC,YAAYC,GACRC,MAAMD,GADQ,KAiBlBE,aAAgBC,IACZ,IACIC,EADOC,IAASC,YAAYC,MACXC,uBAAuB,eAAe,GAEvDJ,EAAUK,MAAMC,OADJ,SAAbP,EAC0B,gBAEA,mBAvBf,KA2BlBQ,iBAAkBC,IACdL,KAAKM,SAAS,CAACJ,MAAMG,EAAEE,OAAOC,SA5BhB,KA+BlBC,qBAAsBJ,IAClBL,KAAKL,aAAaU,EAAEE,OAAOC,OAC3BR,KAAKM,SAAS,CAACV,SAASS,EAAEE,OAAOC,SAjCnB,KAoClBE,mBAAoBL,IAChBL,KAAKM,SAAS,CAACK,OAAQC,KAAKC,MAAMC,SAAST,EAAEE,OAAOC,WArCtC,KAwClBO,kBAAmBV,IACfL,KAAKM,SAAS,CAACU,MAAOJ,KAAKC,MAAMC,SAAST,EAAEE,OAAOC,WAzCrC,KA4ClBS,mBAAoBZ,IAChBA,EAAEa,iBACFlB,KAAKP,MAAMwB,mBAAmBjB,KAAKmB,MAAMC,KA5CzCpB,KAAKmB,MAAQ,CACTC,GAAIpB,KAAKP,MAAM2B,GACflB,MAAOF,KAAKP,MAAMS,MAClBN,SAAUI,KAAKP,MAAMG,SACrBe,OAAQX,KAAKP,MAAMkB,OACnBK,MAAOhB,KAAKP,MAAMuB,OAI1BK,oBAEIrB,KAAKL,aAAaK,KAAKmB,MAAMvB,UAoCjC0B,qBAEItB,KAAKP,MAAM8B,mBAAmBvB,KAAKmB,MAAMC,GAAIpB,KAAKmB,OAGtDK,sBAEI,MAAyB,UAArBxB,KAAKmB,MAAMjB,MAEP,0BAAMuB,UAAU,eAEZ,yBAAKA,UAAU,eACX,qCAAU,2BAAOC,KAAK,QAAQC,QAA8B,QAArB3B,KAAKmB,MAAMjB,MAAkBM,MAAM,MAAMoB,SAAU5B,KAAKI,oBAC/F,sCAAW,2BAAOsB,KAAK,QAAQC,QAA8B,SAArB3B,KAAKmB,MAAMjB,MAAmBM,MAAM,OAAOoB,SAAU5B,KAAKI,oBAClG,uCAAY,2BAAOsB,KAAK,QAAQC,QAA8B,UAArB3B,KAAKmB,MAAMjB,MAAoBM,MAAM,QAAQoB,SAAU5B,KAAKI,qBAGzG,yBAAKqB,UAAU,mBACP,sCAAW,2BAAOC,KAAK,QAAQC,QAAiC,SAAxB3B,KAAKmB,MAAMvB,SAAqBY,MAAM,OAAOoB,SAAU5B,KAAKS,wBACpG,qCAAU,2BAAOiB,KAAK,QAAUC,QAAiC,QAAxB3B,KAAKmB,MAAMvB,SAAoBY,MAAM,MAAMoB,SAAU5B,KAAKS,yBAE3G,4BAAQgB,UAAU,SAASI,QAAS7B,KAAKiB,oBAAzC,WAMJ,0BAAMQ,UAAU,eAEZ,yBAAKA,UAAU,eACX,qCAAU,2BAAOC,KAAK,QAAQC,QAA8B,QAArB3B,KAAKmB,MAAMjB,MAAkBM,MAAM,MAAMoB,SAAU5B,KAAKI,oBAC/F,sCAAW,2BAAOsB,KAAK,QAAQC,QAA8B,SAArB3B,KAAKmB,MAAMjB,MAAmBM,MAAM,OAAOoB,SAAU5B,KAAKI,oBAClG,uCAAY,2BAAOsB,KAAK,QAAQC,QAA8B,UAArB3B,KAAKmB,MAAMjB,MAAoBM,MAAM,QAAQoB,SAAU5B,KAAKI,qBAGzG,yBAAKqB,UAAU,mBACP,sCAAW,2BAAOC,KAAK,QAAQC,QAAiC,SAAxB3B,KAAKmB,MAAMvB,SAAqBY,MAAM,OAAOoB,SAAU5B,KAAKS,wBACpG,qCAAU,2BAAOiB,KAAK,QAAUC,QAAiC,QAAxB3B,KAAKmB,MAAMvB,SAAoBY,MAAM,MAAMoB,SAAU5B,KAAKS,yBAG3G,0CAAe,2BAAOqB,KAAK,IAAIJ,KAAK,SAASK,KAAK,SAASvB,MAAOR,KAAKmB,MAAMR,OAAQiB,SAAU5B,KAAKU,sBACpG,yCAAc,2BAAOoB,KAAK,IAAIJ,KAAK,SAASK,KAAK,QAASvB,MAAOR,KAAKmB,MAAMH,MAAOY,SAAU5B,KAAKe,qBAClG,4BAAQU,UAAU,SAASI,QAAS7B,KAAKiB,oBAAzC,WAMhBe,SACI,OACI,6BACKhC,KAAKwB,wBAOtBnC,EAAO4C,aAAe,CAClB/B,MAAO,MACPN,SAAU,OACVe,OAAQ,IACRK,MAAO,KAGI3B,Q,kCClHf,MAAM6C,UAAc5C,IAAMC,UACtBC,YAAYC,GACRC,MAAMD,GADQ,KAOlB0C,kBAAmB9B,IACfA,EAAEa,iBACFlB,KAAKM,SAAS,CAAC8B,MAAM/B,EAAEE,OAAOC,SAThB,KAYlB6B,kBAAmBhC,IACfA,EAAEa,iBAEF,IAAIoB,EAAWtC,KAAKmB,MAAMiB,MACZG,OAAO,sIAEXC,KAAKF,IACXG,OAAOC,SAAS,EAAE,GAElBC,IAAYC,SAASC,eAAe,UAAUC,MAAK,SAASC,GAExD,IAAIC,EAASD,EAAOE,YAEpBC,IAAQC,KAAK,yBAA0B,aAAc,CACjDC,QAASJ,EACTV,SAAUA,GACZ,8BAA8BQ,KAAK,KACjCO,MAAM,iBACPC,MAAM,KAAKD,MAAM,6BACrBP,KAAK,KAAK9C,KAAKM,SAAS,CAAC8B,MAAM,SAElCiB,MAAM,yBACNrD,KAAKM,SAAS,CAAC8B,MAAM,OAhCzBpC,KAAKmB,MAAQ,CACTiB,MAAM,IAmCdJ,SACI,OACI,yBAAKP,UAAU,cACX,iEACA,8BACI,2BAAOC,KAAK,QAAQlB,MAAOR,KAAKmB,MAAMiB,MAAOR,SAAU5B,KAAKmC,kBAAmBoB,UAAQ,IACvF,4BAAQ1B,QAAS7B,KAAKqC,mBAAtB,iBAOLH,Q,QClDf,MAAMsB,UAAYlE,IAAMC,UAEtBC,YAAYC,GACVC,MAAMD,GADU,KAoDlBgE,gBAAmBpD,IACjBA,EAAEa,iBAEF,IAAIwC,EAAkB1D,KAAKmB,MAAMwC,QAAQC,IAAKC,GACrCA,GAELzC,EAAK0C,KAAKC,MACdL,EAAgBM,KAAK,kBAAC,EAAD,CAAQ5C,GAAIA,EAAI6C,IAAK7C,EAAIG,mBAAoBvB,KAAKuB,mBAAoBN,mBAAoBjB,KAAKiB,sBAGpH,IAAIiD,EAAuBlE,KAAKmB,MAAMgD,YACtCD,EAAqBF,KAAK,CAAC5C,GAAGA,IAE9BgD,QAAQC,IAAIH,GACZlE,KAAKM,SAAS,CAACqD,QAASD,EAAiBS,YAAYD,KAlErC,KAqElB3C,mBAAqB,CAACH,EAAIkD,KAExB,MAAMC,EAAiBvE,KAAKmB,MAAMgD,YAAYP,IAAKC,GAC7CA,EAAOzC,KAAOA,EACPkD,EAEAT,GAIb7D,KAAKM,SAAS,CAAC6D,YAAaI,KA/EZ,KAkFlBtD,mBAAsBG,IACpB,MAAMmD,EAAiBvE,KAAKmB,MAAMgD,YAAYK,OAAQX,IACpD,GAAIA,EAAOzC,KAAOA,EACd,OAAOyC,IAGb7D,KAAKM,SAAS,CAAC6D,YAAaI,KAxFZ,KA2FlBE,eAAkBpE,IAChBA,EAAEa,iBACFlB,KAAK0E,eA7FW,KA4IpBzD,mBAAsBG,IAEpB,MAAMuD,EAAqB3E,KAAKmB,MAAMgD,YAAYK,OAAQX,IACxD,GAAIA,EAAOzC,KAAOA,EACd,OAAOyC,IAKPU,EAAiBvE,KAAKmB,MAAMwC,QAAQa,OAAQX,IAChD,GAAIA,EAAOpE,MAAM2B,KAAOA,EACpB,OAAOyC,IAIb7D,KAAKM,SAAS,CAAC6D,YAAaQ,EAAoBhB,QAASY,KAxJvDvE,KAAKmB,MAAQ,CACTwC,QAAS,GACTQ,YAAY,GACZS,OAAQ,GACRC,WAAY,CACVC,OAAQC,MAAMC,KAAKD,MAAM,KAAKE,QAC9BC,SAAU,CAAC,CACXC,MAAO,+BACPC,gBAAiB,0BACjBC,YAAa,kBACbC,qBAAsB,kBACtBC,KAAM,MAGRC,cAAc,CACVC,qBAAqB,EACrBC,YAAW,EACXC,OAAQ,CACNC,MAAO,CAAC,CACJC,UAAW,CACPC,cAAe,EACfC,cAAe,cAMzBC,OAAQ,CACJC,SAAS,EACTnB,OAAQ,CACJoB,UAAW,oBAGnBC,SAAS,CACLC,KAAM,aA6Dd1B,cAAc,IAAD,iIAEba,EAAO,CACT5B,QAAS,EAAKxC,MAAMgD,aAGlBkC,EAAU,CACVC,OAAQ,OACRD,QAAQ,CACJ,eAAgB,mBAChB,eAAgB,iBAIpBE,KAAMC,KAAKC,UAAUlB,IAG3BnB,QAAQC,IAAIgC,EAAQE,MAjBD,SAqBXG,MAAM,0HAA0HL,GAASvD,KAAM6D,GAC1IA,EAAIC,QACZ9D,KAAMyC,IACPnB,QAAQC,IAAIkB,GAEZ,EAAKjF,SAAS,CAACuE,WAAY,CACzBC,OAAQC,MAAMC,KAAKD,MAAM,KAAKE,QAC9BC,SAAU,CAAC,CACTC,MAAO,+BACPC,gBAAiB,0BACjBC,YAAa,kBACbwB,KAAM,kBACNvB,qBAAsB,kBACtBC,KAAMA,EAAI,WAIbjC,MAAOwD,IAAO1C,QAAQC,IAAIyC,KAtCZ,6CA6DnB9E,SACE,OACE,6BACI,qDACA,yBAAKP,UAAU,WACX,4BAAQL,GAAG,aAAaS,QAAS7B,KAAKyD,iBAAtC,cACA,yBAAKrC,GAAG,mBACHpB,KAAKmB,MAAMwC,UAIpB,4BAAQvC,GAAG,YAAYS,QAAS7B,KAAKyE,gBAArC,kBAEA,yBAAKrD,GAAG,aACN,yBAAKA,GAAG,SACN,kBAAC,IAAD,CAAMmE,KAAMvF,KAAKmB,MAAM0D,WAAYkC,MAAO,IAAKC,OAAQ,IAAIrD,QAAS3D,KAAKmB,MAAMqE,kBAInF,kBAAC,EAAD,QAUKhC,QC1LKyD,QACW,cAA7BxE,OAAOyE,SAASC,UAEe,UAA7B1E,OAAOyE,SAASC,UAEhB1E,OAAOyE,SAASC,SAASC,MACvB,2DCZNtH,IAASkC,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SD6H3C,kBAAmBwE,WACrBA,UAAUC,cAAcC,MACrBzE,MAAK,SAAA0E,GACJA,EAAaC,gBAEdnE,OAAM,SAAAoE,GACLtD,QAAQsD,MAAMA,EAAMC,a","file":"static/js/main.1433204f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from \"react-dom\"\nimport '../styles/style.css'\n\n\nclass Option extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            id: this.props.id,\n            style: this.props.style,\n            strategy: this.props.strategy,\n            strike: this.props.strike,\n            price: this.props.price\n        }\n\n    }\n    componentDidMount(){\n        // set component border color \n        this.setCompColor(this.state.strategy)\n    }\n\n    // set component border color \n    setCompColor = (strategy)=>{\n        let comp = ReactDOM.findDOMNode(this)\n        let this_form = comp.getElementsByClassName('option_info')[0]\n        if(strategy === 'sell'){\n            this_form.style.border = \"solid 2px red\"\n        }else{\n            this_form.style.border = \"solid 2px green\"\n        }\n    }\n\n    handleChangeType=(e)=>{\n        this.setState({style:e.target.value}) // save option type in state\n    }\n\n    handleChangeStrategy=(e)=>{\n        this.setCompColor(e.target.value) // set component border color \n        this.setState({strategy:e.target.value}) // save option strategy in state\n    }\n\n    handleChangeStrike=(e)=>{\n        this.setState({strike: Math.trunc(parseInt(e.target.value))}) // save strike in state\n    }\n\n    handleChangePrice=(e)=>{\n        this.setState({price: Math.trunc(parseInt(e.target.value))}) // save price in state\n    }\n\n    handleRemoveOption=(e)=>{\n        e.preventDefault()\n        this.props.handleRemoveOption(this.state.id) // remove option form current option list\n    }\n\n    componentDidUpdate(){\n        // when this options state updates, resend current data up to main App.js component\n        this.props.handleUpdateOption(this.state.id, this.state)\n    }\n\n    renderStockOrOption(){\n        // if it is a stock, remove the strike and price form elements\n        if (this.state.style === 'stock'){\n            return (\n                <form className='option_info'>\n                    \n                    <div className='option_type'>\n                        <label>Put<input type=\"radio\" checked={this.state.style === \"put\"}  value=\"put\" onChange={this.handleChangeType}/></label>\n                        <label>Call<input type=\"radio\" checked={this.state.style === \"call\"}  value=\"call\" onChange={this.handleChangeType}/></label>\n                        <label>Stock<input type=\"radio\" checked={this.state.style === \"stock\"}  value=\"stock\" onChange={this.handleChangeType}/></label>\n                    </div>\n\n                    <div className='option_strategy'>\n                            <label>Sell<input type=\"radio\" checked={this.state.strategy === \"sell\"} value=\"sell\" onChange={this.handleChangeStrategy}/></label>\n                            <label>Buy<input type=\"radio\"   checked={this.state.strategy === \"buy\"} value=\"buy\" onChange={this.handleChangeStrategy}/></label>\n                    </div>\n                    <button className='delete' onClick={this.handleRemoveOption}>Delete</button>\n                </form>\n            )\n        }else{\n            // display full option form \n            return (\n                <form className='option_info'>\n                    \n                    <div className='option_type'>\n                        <label>Put<input type=\"radio\" checked={this.state.style === 'put'}  value=\"put\" onChange={this.handleChangeType}/></label>\n                        <label>Call<input type=\"radio\" checked={this.state.style === 'call'}  value=\"call\" onChange={this.handleChangeType}/></label>\n                        <label>Stock<input type=\"radio\" checked={this.state.style === 'stock'}  value=\"stock\" onChange={this.handleChangeType}/></label>\n                    </div>\n\n                    <div className='option_strategy'>\n                            <label>Sell<input type=\"radio\" checked={this.state.strategy === \"sell\"} value=\"sell\" onChange={this.handleChangeStrategy}/></label>\n                            <label>Buy<input type=\"radio\"   checked={this.state.strategy === \"buy\"} value=\"buy\" onChange={this.handleChangeStrategy}/></label>\n                    </div>\n\n                    <label>Strike: <input step=\"1\" type='number' name='strike' value={this.state.strike} onChange={this.handleChangeStrike}/></label>\n                    <label>Price: <input step=\"1\" type='number' name='price'  value={this.state.price} onChange={this.handleChangePrice}/></label>\n                    <button className='delete' onClick={this.handleRemoveOption}>Delete</button>\n                </form>\n            )\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                {this.renderStockOrOption()}\n            </div>\n        )\n    }\n}\n\n// create default props to fill state if no props are passed into the Option Component\nOption.defaultProps = {\n    style: 'put',\n    strategy: 'sell',\n    strike: '0',\n    price: '0'\n}\n\nexport default Option;","import React from 'react';\nimport html2canvas from 'html2canvas';\nimport emailjs from 'emailjs-com';\nimport '../styles/style.css'\n\n\nclass Email extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            email:''\n        }\n    }\n   \n    handleChangeEmail=(e)=>{\n        e.preventDefault()\n        this.setState({email:e.target.value})\n    }\n\n    handleSubmitEmail=(e)=>{\n        e.preventDefault()\n        // get email input and FILTER\n        let to_email = this.state.email\n        const regex = RegExp(\"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\");\n        // match email input to regex \n        if (regex.test(to_email)){\n            window.scrollTo(0,0); // scroll to top of page, important to capture entire chart image\n\n            html2canvas(document.getElementById('chart')).then(function(canvas) {\n                // convert canvas image to base64 encoded string\n                let base64 = canvas.toDataURL();\n                // send email\n                emailjs.send('blauyourmind_gmail_com', 'option_app', {\n                    content: base64,\n                    to_email: to_email\n                },'user_aCtCGZu6T6tz1IvF8dFpQ').then(()=>{\n                    alert('Email Sent!')\n                }).catch(()=>{alert('Error Sending Email!')})\n            }).then(()=>{this.setState({email:''})})\n        }else{\n            alert('Invalid Email Address')\n            this.setState({email:''})\n        }\n    }\n\n    render(){\n        return(\n            <div className='email-form'>\n                <h2>Share Your Strategy With A Friend</h2>\n                <form>\n                    <input type='email' value={this.state.email} onChange={this.handleChangeEmail} required/>\n                    <button onClick={this.handleSubmitEmail}>Send Email</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Email;","import React from 'react';\nimport './styles/style.css'\nimport Option from './components/Option'\nimport Email from './components/Email'\nimport {Line} from 'react-chartjs-2';\n\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n        options: [],\n        optionsData:[],\n        payoff: [],\n        chart_data: {\n          labels: Array.from(Array(400).keys()),\n          datasets: [{\n          label: \"Option Strategy Payoff Chart\",\n          backgroundColor: 'rgba(255, 255, 255,1.0)',\n          borderColor: 'rgb(0, 135, 34)',\n          pointBackgroundColor: 'rgb(0, 135, 34)',\n          data: [],\n          }]\n       },\n        chart_options:{\n            maintainAspectRatio: false,\n            responsive:false,\n            scales: {\n              yAxes: [{\n                  gridLines: {\n                      zeroLineWidth: 3,\n                      zeroLineColor: \"#2C292E\",\n                  },\n                  \n          \n              }]\n          },\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: 'rgb(0, 135, 34)',\n                }\n            },\n            tooltips:{\n                mode: 'nearest'\n            },\n            \n        }\n\n    }\n\n  }\n\n  \n  // ticks:{\n  //   min:-400,\n  //   max: 400\n  // }\n\n  handleAddOption = (e)=>{\n    e.preventDefault()\n\n    let updated_options = this.state.options.map((option)=>{\n      return option\n    })\n    let id = Date.now()\n    updated_options.push(<Option id={id} key={id} handleUpdateOption={this.handleUpdateOption} handleRemoveOption={this.handleRemoveOption}/>)\n\n\n    let updated_options_data = this.state.optionsData\n    updated_options_data.push({id:id})\n    \n    console.log(updated_options_data)\n    this.setState({options: updated_options, optionsData:updated_options_data})\n  }\n\n  handleUpdateOption = (id, new_data)=>{\n    \n    const updatedOptions = this.state.optionsData.map((option) =>{\n      if (option.id === id){\n          return new_data\n      }else{\n          return option\n      }\n    });\n    \n    this.setState({optionsData: updatedOptions})\n  }\n\n  handleRemoveOption = (id)=>{\n    const updatedOptions = this.state.optionsData.filter((option) =>{\n      if (option.id !== id){\n          return option\n      }\n    });\n    this.setState({optionsData: updatedOptions})\n  }\n\n  handleGenChart = (e)=>{\n    e.preventDefault()\n    this.fetchPayoff()\n  }\n\n\n\n  async fetchPayoff(){\n   \n    let data = {\n      options: this.state.optionsData\n  }\n\n    let headers = {\n        method: 'POST',\n        headers:{\n            \"Content-type\": \"application/json\",\n            \"x-powered-by\": \"CORS Anywhere\"\n            \n\n        },\n        body: JSON.stringify(data)\n    }\n    //\"x-powered-by\": \"CORS Anywhere\",\n  console.log(headers.body)\n\n  //https://6rswc176r1.execute-api.us-east-1.amazonaws.com/default/generateOptionPayoff\n  //https://cors-anywhere.herokuapp.com/http://ec2-3-91-62-146.compute-1.amazonaws.com/~michaelblau/Options_Grapher/options.php\n    await fetch(\"https://cors-anywhere.herokuapp.com/https://6rswc176r1.execute-api.us-east-1.amazonaws.com/default/generateOptionPayoff\",headers).then((res)=>{\n        return res.json()\n    }).then((data)=>{\n      console.log(data)\n\n      this.setState({chart_data: {\n        labels: Array.from(Array(400).keys()),\n        datasets: [{\n          label: \"Option Strategy Payoff Chart\",\n          backgroundColor: 'rgba(255, 255, 255,1.0)',\n          borderColor: 'rgb(0, 135, 34)',\n          fill: 'rgb(0, 135, 34)',\n          pointBackgroundColor: 'rgb(0, 135, 34)',\n          data: data['res'],\n        }]\n     }})\n\n    }).catch((err)=>{console.log(err)})\n}\n\n\nhandleRemoveOption = (id)=>{\n  // remove option data\n  const updatedOptionsData = this.state.optionsData.filter((option) =>{\n    if (option.id !== id){\n        return option\n    }\n  });\n\n  // remove option from display list\n  const updatedOptions = this.state.options.filter((option) =>{\n    if (option.props.id !== id){\n        return option\n    }\n  });\n\n  this.setState({optionsData: updatedOptionsData, options: updatedOptions})\n}\n\n\n  render(){\n    return (\n      <div>\n          <h1>Option Payoff Grapher</h1>\n          <div className='options'>\n              <button id='add_option' onClick={this.handleAddOption}>Add Option</button>\n              <div id='options_display'>\n                  {this.state.options}\n              </div>\n          </div>\n          \n          <button id='gen_chart' onClick={this.handleGenChart}>Generate Chart</button>\n\n          <div id='chart-div'>\n            <div id=\"chart\">\n              <Line data={this.state.chart_data} width={900} height={550}options={this.state.chart_options}/>\n            </div>\n          </div>\n\n          <Email/>\n\n      </div>\n    );\n\n  }\n\n  \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}