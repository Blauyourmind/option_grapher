{"version":3,"sources":["components/Option.js","App.js","serviceWorker.js","index.js"],"names":["Option","React","Component","constructor","props","super","handleChangeType","e","this","setState","style","target","value","handleChangeStrategy","parentElement","border","strategy","handleChangeStrike","strike","handleChangePrice","price","state","id","componentDidUpdate","handleUpdateOption","renderStockOrOption","className","type","name","onClick","step","onChange","render","App","handleAddOption","preventDefault","updated_options","options","map","option","Date","now","push","key","updated_options_data","optionsData","console","log","new_data","updatedOptions","handleGenChart","fetchPayoff","payoff","chart_data","labels","Array","from","keys","datasets","label","backgroundColor","borderColor","pointBackgroundColor","data","chart_options","maintainAspectRatio","responsive","scales","yAxes","gridLines","zeroLineWidth","zeroLineColor","legend","display","fontColor","tooltips","mode","headers","method","body","JSON","stringify","fetch","then","res","json","fill","catch","err","width","height","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b90c8ca2.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/style.css'\n\n\nclass Option extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            id: this.props.id,\n            style: '',\n            strategy: '',\n            strike: '0',\n            price: '0'\n        }\n    }\n    handleChangeType=(e)=>{\n        // save option type in state\n        this.setState({style:e.target.value})\n    }\n\n    handleChangeStrategy=(e)=>{\n        // alter color of option visually based on buy or sell\n        if(e.target.value === 'buy'){\n            e.target.parentElement.parentElement.parentElement.style.border = \"solid 2px green\"\n        }else{\n            e.target.parentElement.parentElement.parentElement.style.border = \"solid 2px red\"\n        }\n        \n        // save option strategy in state\n        this.setState({strategy:e.target.value})\n    }\n\n    handleChangeStrike=(e)=>{\n        // save strike in state\n        this.setState({strike:e.target.value})\n    }\n\n    handleChangePrice=(e)=>{\n        // save price in state\n        this.setState({price:e.target.value}) \n    }\n\n    componentDidUpdate(){\n        // when this options state updates, resend current data up to main App.js component\n        this.props.handleUpdateOption(this.state.id, this.state)\n    }\n\n    renderStockOrOption(){\n        // if it is a stock, remove the strike and price form elements\n        if (this.state.style === 'stock'){\n            return (\n                <form className='option_info'>\n                    \n                    <div className='option_type'>\n                        <label>Put<input type=\"radio\" name=\"type\" value=\"put\" onClick={this.handleChangeType}/></label>\n                        <label>Call<input type=\"radio\" name=\"type\" value=\"call\" onClick={this.handleChangeType}/></label>\n                        <label>Stock<input type=\"radio\" name=\"type\" value=\"stock\" onClick={this.handleChangeType}/></label>\n                    </div>\n\n                    <div className='option_strategy'>\n                            <label>Sell<input type=\"radio\" name=\"strategy\" value=\"sell\" onClick={this.handleChangeStrategy}/></label>\n                            <label>Buy<input type=\"radio\" name=\"strategy\" value=\"buy\" onClick={this.handleChangeStrategy}/></label>\n                    </div>\n                </form>\n            )\n        }else{\n            // display full option form \n            return (\n                <form className='option_info'>\n                    \n                    <div className='option_type'>\n                        <label>Put<input type=\"radio\" name=\"type\" value=\"put\" onClick={this.handleChangeType}/></label>\n                        <label>Call<input type=\"radio\" name=\"type\" value=\"call\" onClick={this.handleChangeType}/></label>\n                        <label>Stock<input type=\"radio\" name=\"type\" value=\"stock\" onClick={this.handleChangeType}/></label>\n                    </div>\n\n                    <div className='option_strategy'>\n                            <label>Sell<input type=\"radio\" name=\"strategy\" value=\"sell\" onClick={this.handleChangeStrategy}/></label>\n                            <label>Buy<input type=\"radio\" name=\"strategy\" value=\"buy\" onClick={this.handleChangeStrategy}/></label>\n                    </div>\n\n                    <label>Strike: <input step=\"any\" type='number' name='strike' onChange={this.handleChangeStrike}/></label>\n                    <label>Price: <input step=\"any\" type='number' name='price'  onChange={this.handleChangePrice}/></label>\n                </form>\n            )\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                {this.renderStockOrOption()}\n            </div>\n        )\n    }\n}\n\nexport default Option;","import React from 'react';\nimport './styles/style.css'\nimport Option from './components/Option'\nimport {Line} from 'react-chartjs-2';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n        options: [],\n        optionsData:[],\n        payoff: [],\n        chart_data: {\n          labels: Array.from(Array(400).keys()),\n          datasets: [{\n          label: \"Option Strategy Payoff Chart\",\n          backgroundColor: 'rgba(255, 255, 255,1.0)',\n          borderColor: 'rgb(0, 135, 34)',\n          pointBackgroundColor: 'rgb(0, 135, 34)',\n          data: [],\n          }]\n       },\n        chart_options:{\n            maintainAspectRatio: false,\n            responsive:false,\n            scales: {\n              yAxes: [{\n                  gridLines: {\n                      zeroLineWidth: 3,\n                      zeroLineColor: \"#2C292E\",\n                  },\n                  \n          \n              }]\n          },\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: 'rgb(0, 135, 34)',\n                }\n            },\n            tooltips:{\n                mode: 'nearest'\n            },\n            \n        }\n\n    }\n\n  }\n\n  \n  // ticks:{\n  //   min:-400,\n  //   max: 400\n  // }\n\n  handleAddOption = (e)=>{\n    e.preventDefault()\n\n    let updated_options = this.state.options.map((option)=>{\n      return option\n    })\n    let id = Date.now()\n    updated_options.push(<Option id={id} key={id} handleUpdateOption={this.handleUpdateOption}/>)\n\n\n    let updated_options_data = this.state.optionsData\n    updated_options_data.push({id:id})\n    \n    console.log(updated_options_data)\n    this.setState({options: updated_options, optionsData:updated_options_data})\n  }\n\n  handleUpdateOption = (id, new_data)=>{\n    \n    const updatedOptions = this.state.optionsData.map((option) =>{\n      if (option.id === id){\n          return new_data\n      }else{\n          return option\n      }\n    });\n    \n    this.setState({optionsData: updatedOptions})\n  }\n\n  handleGenChart = (e)=>{\n    e.preventDefault()\n    this.fetchPayoff()\n  }\n\n\n  async fetchPayoff(){\n   \n    let data = {\n      options: this.state.optionsData\n  }\n\n    let headers = {\n        method: 'POST',\n        headers:{\n            \"Content-type\": \"application/json\",\n            \"x-powered-by\": \"CORS Anywhere\"\n            \n\n        },\n        body: JSON.stringify(data)\n    }\n    //\"x-powered-by\": \"CORS Anywhere\",\n  console.log(headers.body)\n\n  //https://6rswc176r1.execute-api.us-east-1.amazonaws.com/default/generateOptionPayoff\n  //https://cors-anywhere.herokuapp.com/http://ec2-3-91-62-146.compute-1.amazonaws.com/~michaelblau/Options_Grapher/options.php\n    await fetch(\"https://cors-anywhere.herokuapp.com/https://6rswc176r1.execute-api.us-east-1.amazonaws.com/default/generateOptionPayoff\",headers).then((res)=>{\n        return res.json()\n    }).then((data)=>{\n      console.log(data)\n\n      this.setState({chart_data: {\n        labels: Array.from(Array(400).keys()),\n        datasets: [{\n          label: \"Option Strategy Payoff Chart\",\n          backgroundColor: 'rgba(255, 255, 255,1.0)',\n          borderColor: 'rgb(0, 135, 34)',\n          fill: 'rgb(0, 135, 34)',\n          pointBackgroundColor: 'rgb(0, 135, 34)',\n          data: data['res'],\n        }]\n     }})\n\n    }).catch((err)=>{console.log(err)})\n}\n\n\n  \n\n\n  render(){\n    return (\n      <div>\n          <h1>Option Payoff Grapher</h1>\n          <div className='options'>\n              <button id='add_option' onClick={this.handleAddOption}>Add Option</button>\n              <div id='options_display'>\n                  {this.state.options}\n              </div>\n          </div>\n          \n          <button id='gen_chart' onClick={this.handleGenChart}>Generate Chart</button>\n\n          <div className='chart-div'>\n            <div>\n              <Line data={this.state.chart_data} width={900} height={550}options={this.state.chart_options}/>\n            </div>\n          </div>\n\n      </div>\n    );\n\n  }\n\n  \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}